name: Test, Build and Release

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - '*'

jobs:
  check_version:
    runs-on: self-hosted
    outputs:
      current_version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
  
      - name: Get current version from setup.py
        id: get_version
        shell: bash
        run: |
          # выдираем из строки вида version='0.1.3' именно 0.1.3
          VERSION=$(sed -nE "s/.*version *= *['\"]([^'\"]+)['\"].*/\1/p" setup.py)
          echo "Current version: $VERSION"
          # записываем в стандартный механизм GitHub Actions
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check version against main
        if: ${{ github.event_name == 'pull_request' }}
        shell: bash
        run: |
          git fetch origin main
          MAIN_VERSION=$(git show origin/main:setup.py \
            | grep -i "version=" \
            | head -n1 \
            | sed -E "s/.*version=['\"]([^'\"]+)['\"].*/\1/")
          echo "Version in main branch: $MAIN_VERSION"
          echo "Version in current branch: ${{ steps.get_version.outputs.version }}"
          if [ "${{ steps.get_version.outputs.version }}" = "$MAIN_VERSION" ]; then
            echo "Version has not changed in setup.py. Failing job."
            exit 1
          fi
          echo "Version has changed in setup.py. Proceeding."
          
  test:
    runs-on: self-hosted
    needs: check_version

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install -r requirements.txt
        python -m pip install pytest

    - name: Install Package in Editable Mode
      run: |
        # Install the package in editable mode to make modules accessible
        python -m pip install -e .

    - name: Run Tests
      # Temporarily add current directory to PYTHONPATH for testing
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: pytest tests/

  release:
    runs-on: self-hosted
    needs: [check_version, test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Dependencies for Package Creation
      run: |
        python -m pip install --upgrade pip setuptools wheel
        sudo apt-get update
        sudo apt-get install -y ruby ruby-dev rubygems build-essential
        sudo gem install --no-document fpm

    - name: Build Debian Package
      id: build_package
      run: |
        version=${{ needs.check_version.outputs.current_version }}
        echo "Building Debian package version $version…"
        fpm -s python -t deb \
            --python-bin python3 \
            --name fastmodbuslibrary \
            --version "$version" \
            .
        echo "package_name=fastmodbuslibrary_${version}_all.deb" >> $GITHUB_OUTPUT
        echo "GITHUB_OUTPUT file is: $GITHUB_OUTPUT"
        echo "Contents of GITHUB_OUTPUT:"
        cat "$GITHUB_OUTPUT"



    - name: Create Git Tag
      id: create_tag  # ID to pass the tag output to the release step
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          version="prv${{ needs.check_version.outputs.current_version }}"
          # Delete existing tag if it exists
          git push --delete origin "$version" || true
          git tag -d "$version" || true
        else
          version="v${{ needs.check_version.outputs.current_version }}"
        fi
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "$version" -m "Release $version"
        git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} "$version" --force
        echo "tag=$version" >> $GITHUB_OUTPUT

    - name: Release on GitHub
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.build_package.outputs.package_name }}
        tag_name: ${{ steps.create_tag.outputs.tag }}
        name: Release ${{ steps.create_tag.outputs.tag }}
        draft: false
        prerelease: ${{ github.event_name == 'pull_request' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
